#!/usr/bin/env python3
#
# CS3700, Fall 2021
# TCP Project Starter Code


import datetime
import json
import sys
import socket

from base64 import b64decode


def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " 3700recv: " + string + "\n")

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
NEXT_SEQ = 0

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

log("socket set up")

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))



WINDOW_SIZE = 96
OUT_OF_ORDER_PACKETS = set()
SENT_ACKS = []

# Now listen for packets
while True:
  log("listening for packets")
  result = sock.recvfrom(MSG_SIZE)

  # If nothing is ready, we hit the timeout
  if result:
    (data, addr) = result
    try:
      decoded = json.loads(data.decode())
      # log("decoded:" + str(decoded))
      # if the sequence number is 0 then we know this is the handshake, send handshake ack
      curr_sequence = decoded['sequence']
      if (NEXT_SEQ == 0):
            curr_sequence += 1
            NEXT_SEQ = curr_sequence 
            default_handshake = json.dumps({"ack": NEXT_SEQ, "window": WINDOW_SIZE})
            log("HANDSHAKE: ABOUT TO SEND " + default_handshake)
            sent = sock.sendto(default_handshake.encode(), addr)
            log("[sent] " + str(sent))

      # the handshake isn't complete, resend the handshake ack
      if not decoded["ack"]:
        default_handshake = json.dumps({"ack": NEXT_SEQ, "window": WINDOW_SIZE})
        sent = sock.sendto(default_handshake.encode(), addr)
        log("[sent again] " + str(sent))
        continue

      # If the EOF flag is set, exit
      if (decoded["eof"]):
        log("[completed]")
        # TODO: send ack back saying you've received?
        # One of these should reach
        for x in range(15):
            last_msg = json.dumps({"eof": True, "data": "", "sequence": decoded["sequence"], "ack": True})
            sent = sock.sendto(last_msg.encode(), addr)
        sys.exit(0)

      # If the received packet has previously been ACKed, dont update NEXT_SEQ and resend ack
      if (result in SENT_ACKS):
        log("Duplicate message. Looking through sent ACKs")
        (data, addr) = result
        stored_decoded = json.loads(data.decode())
        data = b64decode(stored_decoded['data'].encode())
        updated_seq = stored_decoded['sequence'] + len(data)
        msg = json.dumps({"ack": updated_seq})
        log(msg)
        sent = sock.sendto(msg.encode(), addr)
        log("[sent_ack_again] " + str(sent))  

      # If this is not duplicate data 
      elif (decoded['data']):
        log('SEQ: ' + str(decoded['sequence']))
        log('NEXT_SEQ: ' + str(NEXT_SEQ))
        data = b64decode(decoded['data'].encode())
        # If the packet was received in order
        if decoded['sequence'] == NEXT_SEQ:
          log("[recv data] " + str(NEXT_SEQ) + " (" + str(len(data)) + ") ACCEPTED (in-order)")
          sys.stdout.buffer.write(data)
          updated_seq = decoded['sequence'] + len(data)
          log("updated sequence: " + str(updated_seq))
          msg = json.dumps({"ack": updated_seq})
          sent = sock.sendto(msg.encode(), addr)
          log("[sent_bytes] " + str(sent))
          # keep track of sent acks
          SENT_ACKS.append(result)
          NEXT_SEQ = updated_seq
          if sent < len(msg):
            log("[error] unable to fully send packet")
        else:
          log("adding" + str(decoded['sequence']) + "to received list")

          # we want to save the packet we just got to OUT_OF_ORDER_PACKETS, so we can receive it later
          OUT_OF_ORDER_PACKETS.add(result)
          # then look through current OUT_OF_ORDER_PACKETS, to see if any are now in order
          for result in OUT_OF_ORDER_PACKETS:
            (data, addr) = result
            stored_decoded = json.loads(data.decode())
            data = b64decode(stored_decoded['data'].encode())
            if stored_decoded['sequence'] == NEXT_SEQ:
              log("[recv (old) data] " + str(NEXT_SEQ) + " (" + str(len(data)) + ") ACCEPTED (now-in-order)")
              sys.stdout.buffer.write(data)
              updated_seq = stored_decoded['sequence'] + len(data)
              log("updated sequence: " + str(updated_seq))
              msg = json.dumps({"ack": updated_seq})
              sent = sock.sendto(msg.encode(), addr)
              log("[sent_bytes] " + str(sent) + "packet: " + str(msg))
              SENT_ACKS.append(result)
              NEXT_SEQ = updated_seq
              
              if sent < len(msg):
                log("[error] unable to fully send packet")

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      log(str(decoded))
      raise e

  else: 
    log("[error] timeout")
    sys.exit(-1)
