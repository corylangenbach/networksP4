#!/usr/bin/python3
#
# CS3700, Fall 2021
# TCP Project Starter Code
#

import datetime
import json
import sys
import socket
import time
import copy
import math

from base64 import b64encode, b64decode
from collections import namedtuple

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0
RTT = 0
RECEIVED_ACKS = []
# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
# To be dict of {SEQUENCE_NUM: ('msg': packet, 'rtt_start': time_sent_at)}
BUFFER = {}
dest = (UDP_IP, UDP_PORT)

time.sleep(.5)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

# PacketInfo tuple for use in BUFFER
PacketInfo = namedtuple('PacketInfo', ['msg', 'rtt_start'])

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " 3700send: " + string + "\n")


def calculate_rtt(start, stop):
  """Calculates round trip time estimate"""
  # TODO:intial RTT: if RTT == 0: RTT = stop - start ??
  global RTT
  if RTT == 0:
    RTT = stop - start
  else:
  # Recommended Î±: 0.8-0.9 (0.875 for most TCPs)
    alpha = .875
    sample = stop - start
    new_rtt = (alpha * RTT) + ((1 - alpha) *sample)
    RTT = new_rtt
  sock.settimeout(math.ceil(2 * RTT))
  
def handle_packet_send(msg_obj):
  global SEQUENCE
  data = b64decode(msg_obj['data'].encode())
  msg = json.dumps(msg_obj)
  if sock.sendto(msg.encode(), dest) < len(msg):
    log("[error] unable to fully send packet")
    return False
  else:
    log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
    return True

def send_next_packet():
  """Send the next packet in a sequence, and return the sent packet, and the time it was sent at"""
  #"global" required here to be able to read and write to SEQUENCE 
  global SEQUENCE
  data = sys.stdin.buffer.read(DATA_SIZE)
  if (len(data) > 0):
    rtt_start = time.time()
    msg_obj = {"sequence": SEQUENCE, "data": b64encode(data).decode(), "ack": True, "eof": False}
    if handle_packet_send(msg_obj):
      log(f"Sequence number: " + str(SEQUENCE))
      SEQUENCE += len(data)
      log(f'updating sender seq: {SEQUENCE}')
      return PacketInfo(msg_obj, rtt_start)
    return False

def perform_handshake():
  global SEQUENCE
  # perform 3 way handshake and get advertised window
  handshake_sequ = json.dumps({"sequence": SEQUENCE, "data": "", "ack": False, "eof": False})
  # eof and ack keys used in recv
  rtt_start = time.time()
  log(f'Starting handshake: {handshake_sequ}')
  sock.sendto(handshake_sequ.encode(), dest)
  # ensure that we have receieved a proper ack back
  while True:
    try:
      sock.settimeout(1)
      handshake_ack = sock.recvfrom(MSG_SIZE)
      (data, addr) = handshake_ack
      decoded_ack = json.loads(data.decode())
      log(f'decoded_ack: {decoded_ack}')
      rtt_stop = time.time()
      if (int(decoded_ack["ack"]) != SEQUENCE + 1):
        # send msg again
        sock.sendto(handshake_sequ.encode(), dest)
      else:
        break
    except:
      sock.sendto(handshake_sequ.encode(), dest)
      log(f'No message receieved. Send new packet')
      continue

  # perform third part of handshake
  third_handshake = json.dumps({"sequence": SEQUENCE, "data": "", "ack": True, "eof": False})
  sock.sendto(third_handshake.encode(), dest)
  
  # Calculate RTT
  calculate_rtt(rtt_start, rtt_stop)
  # update sequence
  SEQUENCE += int(decoded_ack["ack"])
  window = decoded_ack["window"]
  return window

def init_sliding_window(window):
  global SEQUENCE, BUFFER
  for x in range(window):
    sent_packet = send_next_packet()
    if sent_packet:
      # Store packets in buffer.
      BUFFER[SEQUENCE] = sent_packet
      # handle_packet_send has similar log
      # log("sent a packet at SEQ: " + str(SEQUENCE))
      continue
    else:
      break

# Setup connection
window = perform_handshake()

# Start sliding window
init_sliding_window(window)

# Now read in data, send packets
while True and BUFFER:
  #log("ABOUT TO SLEEP")
  try:
    result = sock.recvfrom(MSG_SIZE)

    if result:
      (data, addr) = result
      try:
        decoded = json.loads(data.decode())
        rtt_stop = time.time()
        log("[recv pkt] " + str(decoded))
        log("[recv ack] " + str(decoded['ack']))

        # If there is an ack, send next packet
        lowest_seq = min(BUFFER.keys())

        if decoded['ack'] == lowest_seq and not decoded.get("window"):
          print('removing ' + str(lowest_seq) + "from buffer")
          # Remove the ack-ed sequence from the buffer and get the stored value
          acked_packet = BUFFER.pop(lowest_seq)
          rtt_start = acked_packet.rtt_start
          calculate_rtt(rtt_start, rtt_stop)
          # Try to send next packet
          sent_packet = send_next_packet()
          if sent_packet:
            BUFFER[SEQUENCE] = sent_packet
          else:
            # No more packets to send. Wait for other acks
            print('packet not sent')
            pass
        elif int(decoded['ack']) <= lowest_seq - DATA_SIZE:
          # ignore duplicate packet
          log('duplicate packet received. ack: ' + str(decoded['ack']))
          continue
        # Ack received out of sequence, meaning that a packet was dropped before from receiver to sender
        else:
          log("looking through receievd acks!!!!")
          resend = True
          # we want to add the received ack to RECEIVED_ACKS, and also check if any acks in received acks are now in order
          RECEIVED_ACKS.append(decoded)
          for decoded in RECEIVED_ACKS:
            # (data, addr) = ack
            # decoded = json.loads(data.decode())
            lowest_seq = min(BUFFER.keys())
            if decoded['ack'] == lowest_seq:
              resend = False
              print('removing ' + str(lowest_seq) + "from buffer")
              # Remove the ack-ed sequence from the buffer and get the stored value
              acked_packet = BUFFER.pop(lowest_seq)
              rtt_start = acked_packet.rtt_start
              calculate_rtt(rtt_start, rtt_stop)
              # Try to send next packet
              sent_packet = send_next_packet()
              if sent_packet:
                BUFFER[SEQUENCE] = sent_packet
              else:
                # No more packets to send. Wait for other acks
                print('packet not sent')
                pass
          temp = decoded['ack']
          print(f'decoded_ack: {temp}, lowest_seq: {lowest_seq}')
          # Get packet with lowest sequence
          not_acked = BUFFER[lowest_seq]
          #print(f'Not acked: {not_acked}')

          if resend:
          # TODO: Or, do we always want to do this?
            #buff_keys_copy = copy.deepcopy(BUFFER.keys())
            for seq in BUFFER.keys():
              packet_info = BUFFER[seq]
              msg_obj = packet_info.msg
              new_start = time.time()
              handle_packet_send(msg_obj)
              new_packet_info = PacketInfo(msg_obj, new_start)
              # Update the packet in the buffer with the new time sent at
              BUFFER[seq] = new_packet_info
      
      except (ValueError, KeyError, TypeError) as e:
        print(e)
        log("[recv corrupt packet]")
    # else:
    #   # TODO: possible packet drop from 3700recv?
    #   log("[error] timeout")
    #   sys.exit(-1)
  except socket.timeout:
    # If packet has taken longer than 2x RTT, Resend packets in buffer
    for seq in BUFFER.keys():
      packet_info = BUFFER[seq]
      msg_obj = packet_info.msg
      new_start = time.time()
      handle_packet_send(msg_obj)
      new_packet_info = PacketInfo(msg_obj, new_start)
      # Update the packet in the buffer with the new time sent at
      BUFFER[seq] = new_packet_info

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": True}).encode(), dest)
sys.exit(0)
